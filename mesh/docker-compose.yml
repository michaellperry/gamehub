name: gamehub

services:
  # PostgreSQL Database Service
  postgres:
    image: postgres:16.0-bookworm
    container_name: gamehub-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-gamehub}
      POSTGRES_USER: ${POSTGRES_USER:-gamehub_admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_change_in_production}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - gamehub-db-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-gamehub_admin} -d ${POSTGRES_DB:-gamehub}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # FusionAuth Service
  fusionauth:
    image: fusionauth/fusionauth-app:latest
    container_name: gamehub-fusionauth
    environment:
      DATABASE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB:-gamehub}
      DATABASE_ROOT_USERNAME: ${POSTGRES_USER:-gamehub_admin}
      DATABASE_ROOT_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_change_in_production}
      FUSIONAUTH_APP_MEMORY: ${FUSIONAUTH_APP_MEMORY:-512M}
      FUSIONAUTH_APP_RUNTIME_MODE: ${FUSIONAUTH_APP_RUNTIME_MODE:-production}
      SEARCH_TYPE: ${FUSIONAUTH_SEARCH_ENGINE_TYPE:-database}
    volumes:
      - fusionauth-config:/usr/local/fusionauth/config
      - ./secrets/fusionauth:/usr/local/fusionauth/secrets:ro
    networks:
      - gamehub-auth-network
      - gamehub-db-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "--silent", "--fail", "http://localhost:9011/api/status", "-o", "/dev/null", "-w", "%{http_code}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    depends_on:
      postgres:
        condition: service_healthy

  # Jinaga Replicator Service
  gamehub-replicator:
    image: jinaga/jinaga-replicator:3.5.2
    container_name: gamehub-replicator
    volumes:
      - ./replicator/policies:/var/lib/replicator/policies:ro
      - ./replicator/authentication:/var/lib/replicator/authentication:ro
      - ./replicator/subscriptions:/var/lib/replicator/subscriptions:ro
      - gamehub_replicator_data:/var/lib/postgresql/data
    networks:
      - gamehub-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "--silent", "--fail", "http://localhost:8080/health", "-o", "/dev/null"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Service IP (existing service)
  service-ip:
    build:
      context: ../app/service-ip
      dockerfile: Dockerfile
    container_name: gamehub-service-ip
    ports:
      - "8083:8083"
    environment:
      - NODE_ENV=production
      - SERVER_PORT=8083
      - JWT_SECRET=${JWT_SECRET:-production-secret-key-change-me}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN:-1h}
      - JWT_ISSUER=${JWT_ISSUER:-service-ip}
      - JWT_AUDIENCE=${JWT_AUDIENCE:-service-clients}
      - JWT_KEY_ID=${JWT_KEY_ID:-service-ip-key}
      - CORS_ORIGIN=${CORS_ORIGIN:-*}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - CLIENTS_DIR=/app/secrets/clients
    volumes:
      - ./secrets/service-ip/clients:/app/secrets/clients:ro
    networks:
      - gamehub-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:8083/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Player IP (existing service with SQLite integration)
  player-ip:
    build:
      context: ../app
      dockerfile: player-ip/Dockerfile
    container_name: gamehub-player-ip
    ports:
      - "8082:8082"
    environment:
      - NODE_ENV=production
      - SERVER_PORT=8082
      - JWT_SECRET=${PLAYER_JWT_SECRET:-production-player-secret-key-change-me}
      - JWT_EXPIRES_IN=${PLAYER_JWT_EXPIRES_IN:-1h}
      - JWT_ISSUER=${PLAYER_JWT_ISSUER:-player-ip}
      - JWT_AUDIENCE=${PLAYER_JWT_AUDIENCE:-gamehub-players}
      - JWT_KEY_ID=${PLAYER_JWT_KEY_ID:-player-ip-key}
      - CORS_ORIGIN=${PLAYER_CORS_ORIGIN:-*}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - SQLITE_DB_PATH=/app/data/player-ip.db
      - REFRESH_TOKEN_EXPIRES_IN=${REFRESH_TOKEN_EXPIRES_IN:-14d}
      - ROTATE_REFRESH_TOKENS=${ROTATE_REFRESH_TOKENS:-false}
      - TENANT_PUBLIC_KEY=${TENANT_PUBLIC_KEY}
      - SERVICE_IP_URL=http://service-ip:8083
      - SERVICE_IP_CLIENT_ID=player-ip
      - SERVICE_IP_CLIENT_SECRET_FILE=/app/secrets/player-ip-client-secret
      - REPLICATOR_URL=http://gamehub-replicator:8080/jinaga
    volumes:
      - player-ip-data:/app/data
      - ./secrets/player-ip:/app/secrets:ro
    networks:
      - gamehub-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:8082/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - service-ip
      - gamehub-replicator

  # Content Store (existing service)
  content-store:
    build:
      context: ../app/content-store
      dockerfile: Dockerfile
    container_name: gamehub-content-store
    ports:
      - "8081:8081"
    environment:
      - NODE_ENV=production
      - PORT=8081
      - STORAGE_DIR=/app/storage
      - AUTH_DIR=/app/secrets
      - CORS_ORIGIN=${CONTENT_STORE_CORS_ORIGIN:-*}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    volumes:
      - content-store-data:/app/storage
      - ./secrets/content-store:/app/secrets:ro
    networks:
      - gamehub-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:8081/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - service-ip
      - player-ip

  # Relay Service (observability aggregation)
  relay-service:
    build:
      context: ../app/relay-service
      dockerfile: Dockerfile
    container_name: gamehub-relay-service
    ports:
      - "8084:8084"
    environment:
      - NODE_ENV=production
      - SERVER_PORT=8084
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - CORS_ORIGIN=${RELAY_CORS_ORIGIN:-*}
      - CACHE_TIMEOUT=${RELAY_CACHE_TIMEOUT:-30000}
      - RELAY_CONFIG=${RELAY_CONFIG:-}
    networks:
      - gamehub-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:8084/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - service-ip
      - player-ip
      - content-store

  # NGINX Reverse Proxy
  nginx:
    image: nginx:stable-alpine
    container_name: gamehub-nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/app/gamehub-admin:/var/www/admin:ro
      - ./nginx/app/gamehub-player:/var/www/player:ro
      - ./nginx/html:/usr/share/nginx/html:ro
    networks:
      - gamehub-network
      - gamehub-auth-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    depends_on:
      - service-ip
      - player-ip
      - content-store
      - relay-service
      - gamehub-replicator
      - fusionauth

# Network Configuration
networks:
  gamehub-network:
    driver: bridge
    name: gamehub-network
  gamehub-db-network:
    driver: bridge
    name: gamehub-db-network
  gamehub-auth-network:
    driver: bridge
    name: gamehub-auth-network

# Volume Configuration
volumes:
  # Database volumes
  postgres-data:
    name: gamehub-postgres-data
  
  # FusionAuth volumes
  fusionauth-config:
    name: gamehub-fusionauth-config
  
  # Application data volumes
  service-ip-data:
    name: gamehub-service-ip-data
  player-ip-data:
    name: gamehub-player-ip-data
  content-store-data:
    name: gamehub-content-store-data
  gamehub_replicator_data:
    name: gamehub-replicator-data