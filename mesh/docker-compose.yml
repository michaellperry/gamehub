services:
  service-ip:
    build:
      context: ../app/service-ip
      dockerfile: Dockerfile
    container_name: gamehub-service-ip
    ports:
      - "8083:8083"
    environment:
      - NODE_ENV=production
      - SERVER_PORT=8083
      - JWT_SECRET=${JWT_SECRET:-production-secret-key-change-me}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN:-1h}
      - JWT_ISSUER=${JWT_ISSUER:-service-ip}
      - JWT_AUDIENCE=${JWT_AUDIENCE:-service-clients}
      - JWT_KEY_ID=${JWT_KEY_ID:-service-ip-key}
      - CORS_ORIGIN=${CORS_ORIGIN:-*}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - CLIENTS_DIR=/app/secrets/clients
    volumes:
      - ./secrets/service-ip/clients:/app/secrets/clients:ro
      - ./secrets/shared:/app/secrets/shared:ro
    networks:
      - gamehub-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:8083/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on: []

  player-ip:
    build:
      context: ../app/player-ip
      dockerfile: Dockerfile
    container_name: gamehub-player-ip
    ports:
      - "8082:8082"
    environment:
      - NODE_ENV=production
      - SERVER_PORT=8082
      - JWT_SECRET=${PLAYER_JWT_SECRET:-production-player-secret-key-change-me}
      - JWT_EXPIRES_IN=${PLAYER_JWT_EXPIRES_IN:-1h}
      - JWT_ISSUER=${PLAYER_JWT_ISSUER:-player-ip}
      - JWT_AUDIENCE=${PLAYER_JWT_AUDIENCE:-gamehub-players}
      - JWT_KEY_ID=${PLAYER_JWT_KEY_ID:-player-ip-key}
      - CORS_ORIGIN=${PLAYER_CORS_ORIGIN:-*}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - SQLITE_DB_PATH=/app/data/player-ip.db
      - REFRESH_TOKEN_EXPIRES_IN=${REFRESH_TOKEN_EXPIRES_IN:-14d}
      - ROTATE_REFRESH_TOKENS=${ROTATE_REFRESH_TOKENS:-false}
      - SERVICE_IP_URL=http://service-ip:8083
      - SERVICE_IP_CLIENT_ID=player-ip
      - SERVICE_IP_CLIENT_SECRET_FILE=/app/secrets/player-ip-client-secret
    volumes:
      - player-ip-data:/app/data
      - ./secrets/player-ip:/app/secrets:ro
      - ./secrets/shared:/app/secrets/shared:ro
    networks:
      - gamehub-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:8082/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - service-ip

  content-store:
    build:
      context: ../app/content-store
      dockerfile: Dockerfile
    container_name: gamehub-content-store
    ports:
      - "8081:8081"
    environment:
      - NODE_ENV=production
      - PORT=8081
      - STORAGE_DIR=/app/storage
      - AUTH_DIR=/app/secrets
      - CORS_ORIGIN=${CONTENT_STORE_CORS_ORIGIN:-*}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    volumes:
      - content-store-data:/app/storage
      - ./secrets/content-store:/app/secrets:ro
      - ./secrets/shared:/app/secrets/shared:ro
    networks:
      - gamehub-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:8081/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - service-ip
      - player-ip

networks:
  gamehub-network:
    driver: bridge
    name: gamehub-network

volumes:
  service-ip-data:
    name: gamehub-service-ip-data
  player-ip-data:
    name: gamehub-player-ip-data
  content-store-data:
    name: gamehub-content-store-data