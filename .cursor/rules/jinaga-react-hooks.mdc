---
description: "Use this rule when building React components that display or modify facts. Contains useSpecification patterns, custom hooks, and view models."
alwaysApply: false
---
# Jinaga React Integration

## useSpecification Best Practices

### Parameter Handling
1. **Never create fallback objects**: Don't create dummy User/Tenant objects when parameters are null
2. **Let useSpecification handle nulls**: The hook automatically waits for all parameters to be non-null
3. **Define specifications unconditionally**: Always define the full specification, don't conditionally create it
4. **Trust the loading state**: The `loading` flag properly indicates when data is being fetched

### Specification Stability (Critical for Performance)
1. **Never recreate specifications inside hooks**: This causes infinite loops and performance issues
2. **Define specifications outside hooks**: Move specification definitions to module level

### Loading State Management
1. **Automatic loading detection**: `useSpecification` automatically sets `loading: true` when parameters are null
2. **No manual loading logic**: Don't manually track loading states for parameter availability
3. **Real-time updates**: The hook automatically re-runs when parameters change from null to non-null
4. **Loading flag vs Data availability**: 
   - `loading: true` → Show loading indicator in UI
   - `data !== null` → Data has been loaded (may be empty array)
   - `data === null` → Still loading or error occurred
5. **Check data, not loading**: Use `data !== null` to determine if data is available, not the loading flag

## Model Usage Patterns

### Client-side Usage
```typescript
// In React components
import { model, ServicePrincipal, Tenant } from '@model/model';
import { User } from 'jinaga';
import { useSpecification } from 'jinaga-react';
import { useState } from 'react';
import { j } from '../jinaga-config';
import { useTenant } from '../tenants/useTenant';

// Define specification for querying facts
const servicePrincipalsInTenant = model
  .given(Tenant)
  .match((tenant) => ServicePrincipal.of(tenant));

// Create facts using fact method
async function createServicePrincipal(tenant: Tenant, publicKey: string) {
  await j.fact(new ServicePrincipal(new User(publicKey), tenant, new Date()));
}

async function createTenant(user: User) {
  const tenant = await j.fact(new Tenant(user));
  await j.fact(new Administrator(tenant, user, new Date()));
}

// React hook using useSpecification
export function useServicePrincipals() {
  const tenant = useTenant();
  const { data, error, loading } = useSpecification(j, servicePrincipalsInTenant, tenant);
  const [actionError, setActionError] = useState<Error | null>(null);

  const addServicePrincipal = (publicKey: string) => {
    if (tenant) {
      createServicePrincipal(tenant, publicKey)
        .then(() => setActionError(null))
        .catch(setActionError);
    }
  };

  return {
    isConfigured: !!tenant,
    servicePrincipals: data?.map((sp) => ({
      id: j.hash(sp),
      createdAt: sp.createdAt,
      publicKey: sp.user.publicKey,
    })) || null,
    error: actionError || error,
    loading: loading,
    canAddServicePrincipal: !!tenant,
    addServicePrincipal,
  };
}
```

### Client-side Usage - useSpecification Best Practices
```typescript
// Correct pattern for useSpecification with conditional parameters
export function useConditionalData() {
  const user = useUser();
  const tenant = useTenant();
  
  // Define specification that expects both parameters
  const dataSpec = model.given(User, Tenant).match((user, tenant) => 
    SomeFact.in(tenant).join(fact => fact.user, user)
  );
  
  // Pass null parameters - useSpecification will only load when all are non-null
  const { data, loading } = useSpecification(j, dataSpec, user, tenant);
  
  return { data, loading };
}
```

### Common Mistakes to Avoid
```typescript
// ❌ WRONG: Creating fallback objects
const { data } = useSpecification(j, spec, user || new User(''), tenant || new Tenant(new User('')));

// ❌ WRONG: Conditional specification creation
const spec = user && tenant ? model.given(User, Tenant).match(...) : null;

// ❌ WRONG: Specification recreation on every render (CAUSES INFINITE LOOPS)
export function useMyHook() {
  const spec = model.given(User, Tenant).match((user, tenant) => ...); // Recreated every render!
  const { data } = useSpecification(j, spec, user, tenant);
}

// ✅ CORRECT: Always define the specification, let useSpecification handle nulls
const spec = model.given(User, Tenant).match((user, tenant) => ...);
const { data } = useSpecification(j, spec, user, tenant);
```

### Specification Definition Patterns
```typescript
// ✅ CORRECT: Define specification once, use with conditional parameters
const playerNameSpec = model.given(User, Tenant).match((user, tenant) => 
  Player.in(tenant)
    .join(player => player.user, user)
    .selectMany(player => PlayerName.current(player))
);

// ✅ CORRECT: Pass actual parameters (including null)
const { data } = useSpecification(j, playerNameSpec, user, tenant);
```

## Custom Hooks with View Models

### Hook Structure Pattern

#### Single Responsibility Principle
- Each hook should have **one clear responsibility**
- Extract related state and logic into focused hooks
- Avoid mixing unrelated concerns in a single hook

#### View Model Interface Pattern
```typescript
export interface [Feature]ViewModel {
    // State properties
    [propertyName]: [type];
    
    // Event handlers
    handle[Action]: (params?) => void;
    
    // State setters (when needed)
    set[Property]: (value: [type]) => void;
}
```

#### Hook Implementation Pattern
```typescript
export function use[Feature](): [Feature]ViewModel {
    // 1. State declarations
    const [state, setState] = useState<[type]>(initialValue);
    
    // 2. External dependencies (other hooks, context)
    const { data } = useSomeOtherHook();
    
    // 3. Side effects
    useEffect(() => {
        // Effect logic
    }, [dependencies]);
    
    // 4. Event handlers
    const handleAction = useCallback((params) => {
        // Handler logic
    }, [dependencies]);
    
    // 5. Computed values
    const computedValue = useMemo(() => {
        // Computation logic
    }, [dependencies]);
    
    // 6. Return view model
    return {
        // State
        property: state,
        
        // Handlers
        handleAction,
        
        // Setters
        setProperty: setState,
    };
}
```

### Custom Hooks with useSpecification
```typescript
// Example: Custom hook that combines multiple useSpecification calls
export function useUserDashboard() {
  const user = useUser();
  
  // Multiple specifications for different data
  const { data: tenants, loading: tenantsLoading } = useSpecification(j, userTenantsSpec, user);
  const { data: games, loading: gamesLoading } = useSpecification(j, userGamesSpec, user);
  const { data: invitations, loading: invitationsLoading } = useSpecification(j, userInvitationsSpec, user);

  const loading = tenantsLoading || gamesLoading || invitationsLoading;
  const hasData = tenants !== null && games !== null && invitations !== null;

  return {
    loading,
    hasData,
    tenants: tenants || [],
    games: games || [],
    invitations: invitations || [],
  };
}
```

## React Component Integration

### Example: Complete React component using useSpecification
```typescript
import React from 'react';
import { useSpecification } from 'jinaga-react';
import { model, Tenant, User } from '@gamehub/model';
import { j } from '../jinaga-config';

const userTenantsSpec = model.given(User).match((user) => 
  Administrator.by(user)
    .selectMany(admin => admin.tenant.predecessor())
);

export function UserTenants() {
  const user = useUser();
  const { data: tenants, loading, error } = useSpecification(j, userTenantsSpec, user);

  if (loading) {
    return <div>Loading tenants...</div>;
  }

  if (error) {
    return <div>Error loading tenants: {error.message}</div>;
  }

  if (!tenants || tenants.length === 0) {
    return <div>No tenants found</div>;
  }

  return (
    <div>
      <h2>Your Tenants</h2>
      <ul>
        {tenants.map(tenant => (
          <li key={j.hash(tenant)}>
            Tenant: {tenant.name}
          </li>
        ))}
      </ul>
    </div>
  );
}
```

## Error Handling

### Error Handling Patterns
```typescript
// ✅ CORRECT: Handle errors from useSpecification
const { data, error, loading } = useSpecification(j, spec, user, tenant);

// ✅ CORRECT: Check for parameter availability before actions
const handleAction = async () => {
  if (!user || !tenant) {
    console.error('Required parameters not available');
    return;
  }
  // Proceed with action
};
```

## Performance Considerations

1. **Indexing**: Use appropriate fact types for efficient queries
2. **Distribution**: Minimize unnecessary fact distribution
3. **Caching**: Cache frequently accessed facts on the client
4. **Pagination**: Handle large fact sets with pagination
5. **Specification stability**: Avoid recreating specifications to prevent infinite loops

## Best Practices

### 1. Encapsulation
- Keep internal state and logic private to the hook
- Only expose what the component needs through the view model
- Use TypeScript interfaces to define clear contracts

### 2. Immutability
- Return new objects/arrays rather than mutating existing ones
- Use spread operators for object updates
- Prefer functional updates for state setters

### 3. Performance
- Use `useCallback` for event handlers that are passed to child components
- Use `useMemo` for expensive computations
- Minimize re-renders by carefully managing dependencies

### 4. Error Handling
- Handle errors gracefully within the hook
- Provide meaningful error states in the view model
- Log errors appropriately for debugging

### 5. Testing Considerations
- Design hooks to be easily testable
- Avoid tight coupling to external services
- Consider dependency injection for external dependencies 