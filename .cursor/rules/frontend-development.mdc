---
description: "Apply when building React components, especially molecules and organisms. Use when composing larger components from smaller ones, writing HTML and TailwindCSS, creating component variants, or organizing components."
alwaysApply: false
---
# Frontend Development Guidelines

## Component Composition Principle

**Larger components MUST be constructed from smaller components. Avoid direct HTML elements and TailwindCSS classes in larger components.**

### Composition Hierarchy
```
Atoms → Molecules → Organisms → Templates → Pages
```

## Component Construction Rules

### ❌ AVOID - Direct HTML/TailwindCSS in Larger Components
```typescript
// BAD: Direct HTML and TailwindCSS in molecule
export const ChallengeModal = ({ opponent }) => (
  <div className="fixed z-10 inset-0 overflow-y-auto">
    <div className="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
      <div className="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity"></div>
      <div className="inline-block align-bottom bg-white rounded-lg px-4 pt-5 pb-4 text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full sm:p-6">
        <h3 className="text-lg leading-6 font-medium text-gray-900">Challenge Player</h3>
        <button className="bg-white rounded-md text-gray-400 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500">
          <span className="sr-only">Close</span>
          <svg className="h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>
    </div>
  </div>
);
```

### ✅ PREFER - Component Composition
```typescript
// GOOD: Composed from smaller components
export const ChallengeModal = ({ opponent }) => (
  <Modal title="Challenge Player" size="md">
    <PlayerAvatar player={opponent} />
    <ChallengeOptions />
    <ChallengeActions onChallenge={handleChallenge} />
  </Modal>
);
```

## Component Classification

### Atoms (Basic UI Elements)
- **Purpose**: Smallest, indivisible UI elements
- **Examples**: Button, Icon, Typography, Input
- **Rules**: Minimal HTML, focused TailwindCSS classes

### Molecules (Functional Units)
- **Purpose**: Combinations of atoms forming functional units
- **Examples**: Modal, FormField, PlayerAvatar, GameCard
- **Rules**: Composed from atoms only, no direct HTML

### Organisms (Complex Sections)
- **Purpose**: Complex UI sections combining molecules and atoms
- **Examples**: GameSession, PlayerList, ResourceList
- **Rules**: Composed from molecules and atoms only

## Domain-Specific Components

Domain-specific components follow the same Atomic Design hierarchy:

### Domain Atoms
```typescript
// Gaming domain atom
export const PlayerAvatar = ({ player }) => (
  <div className="flex items-center space-x-2">
    <Icon name="profile" size="sm" />
    <Typography variant="body">{player.name}</Typography>
  </div>
);
```

### Domain Molecules
```typescript
// Gaming domain molecule - composed from atoms
export const ChallengeModal = ({ opponent }) => (
  <Modal title="Challenge Player">
    <PlayerAvatar player={opponent} />
    <ChallengeOptions />
    <ChallengeActions />
  </Modal>
);
```

### Domain Organisms
```typescript
// Gaming domain organism - composed from molecules
export const GameSession = ({ game }) => (
  <PageLayout variant="game">
    <GameHeader game={game} />
    <PlayerList players={game.players} />
    <GameBoard board={game.board} />
    <GameControls controls={game.controls} />
  </PageLayout>
);
```

## TailwindCSS Usage Guidelines

### ❌ AVOID - Direct TailwindCSS in Larger Components
```typescript
// BAD: Too many utility classes
<div className="flex items-center justify-between p-4 bg-white border border-gray-200 rounded-lg shadow-sm hover:shadow-md transition-shadow duration-200">
  <div className="flex items-center space-x-3">
    <div className="w-10 h-10 bg-gray-300 rounded-full flex items-center justify-center">
      <svg className="w-6 h-6 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
      </svg>
    </div>
    <div>
      <h3 className="text-sm font-medium text-gray-900">{player.name}</h3>
      <p className="text-sm text-gray-500">Joined {player.joinedAt}</p>
    </div>
  </div>
  <button className="inline-flex items-center px-3 py-1.5 border border-transparent text-xs font-medium rounded-md text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500">
    Challenge
  </button>
</div>
```

### ✅ PREFER - Component Variants
```typescript
// GOOD: Composed from smaller components with variants
<PlayerCard variant="interactive" player={player}>
  <PlayerAvatar player={player} size="md" />
  <PlayerInfo player={player} />
  <ChallengeButton variant="primary" size="sm" />
</PlayerCard>
```

## Component Variants Pattern

```typescript
// Define variants instead of utility classes
export interface CardProps {
  variant?: 'default' | 'interactive' | 'selected';
  children: React.ReactNode;
}

const Card: React.FC<CardProps> = ({ variant = 'default', children }) => {
  const variantClasses = {
    default: 'p-4 bg-white border border-gray-200 rounded-lg',
    interactive: 'p-4 bg-white border border-gray-200 rounded-lg hover:shadow-md transition-shadow cursor-pointer',
    selected: 'p-4 bg-primary-50 border border-primary-200 rounded-lg',
  };

  return (
    <div className={variantClasses[variant]}>
      {children}
    </div>
  );
};
```

## Import Organization

```typescript
// Generic UI components
import { Button, Modal, Icon } from './components/atoms';
import { FormField, ListItem } from './components/molecules';

// Domain-specific components
import { PlayerAvatar, GameIcon } from './components/atoms';
import { ChallengeModal, GameCard } from './components/molecules';
import { GameSession, PlayerLobby } from './components/organisms';
```

## Code Review Checklist

### For Molecules and Larger Components:
- [ ] Uses only smaller components (atoms/molecules)?
- [ ] No direct HTML elements (`<div>`, `<button>`, etc.)?
- [ ] No direct TailwindCSS utility classes?
- [ ] Could be broken down into smaller components?
- [ ] Uses component variants instead of utility classes?

### For Atoms:
- [ ] Smallest possible component?
- [ ] Single, clear responsibility?
- [ ] Minimal, focused TailwindCSS classes?
- [ ] Could be composed from even smaller atoms?

### Red Flags:
- Direct HTML elements in molecules or larger components
- More than 3-4 TailwindCSS classes in a single component
- Custom CSS instead of component variants
- Duplicate styling patterns across components

## Technology Stack

- **React 18** - UI framework with TypeScript
- **Vite** - Build tool and dev server
- **TailwindCSS** - Utility-first CSS framework
- **Jinaga** - Real-time data synchronization
- **Atomic Design** - Component organization methodology

## Development Patterns

1. **Component Structure**: Functional components with hooks
2. **TypeScript**: Strict typing for all components
3. **Composition**: Build larger components from smaller ones
4. **Variants**: Use component variants over utility classes
5. **Accessibility**: All components must be accessible
6. **Responsive**: Mobile-first responsive design
7. **Theme Support**: Light and dark theme compatibility

- **Heading 3**: `text-lg font-medium text-gray-900`
- **Body Text**: `text-base text-gray-700`
- **Small Text**: `text-sm text-gray-500`
