---
description: "Apply this rule when defining new fact types, authorization rules, or distribution patterns in the Jinaga data model. Use for creating immutable facts, multi-tenant structures, role-based authorization, and share/with distribution rules."
alwaysApply: false
---
# Jinaga Data Model Development

## Related Rules

- **jinaga-usage-patterns**: Use this rule when you need to load or create facts from React components
- **frontend-development**: Use this rule when implementing UI components that interact with facts

## When to Use Both Rules Together

When building UI components that create new facts:
1. **First**: Use **jinaga-data-model** to define the fact structure, authorization, and distribution rules
2. **Then**: Use **jinaga-usage-patterns** to implement the React components that create and display those facts

## Model Architecture (`app/gamehub-model/`)

### Core Structure
- **[index.ts](app/gamehub-model/index.ts)** - Main exports and model entry point
- **[model/](app/gamehub-model/model/)** - Fact definitions and domain model
- **[authorization/](app/gamehub-model/authorization/)** - Security rules and policies
- **[distribution/](app/gamehub-model/distribution/)** - Query execution control using `share`/`with` pattern

## Fact Definition Patterns

### Basic Fact Structure
```typescript
// app/gamehub-model/model/my-fact.ts
import { LabelOf, ModelBuilder, User } from 'jinaga';

export class MyFact {
  static Type = 'MyFact' as const;
  public type = MyFact.Type;
  
  constructor(
    public readonly property: string,
    public readonly createdBy: User
  ) {}
}

// Model registration
export const myFactModel = (b: ModelBuilder) =>
  b.type(MyFact, (m) => m.predecessor('createdBy', User));
```

### Fact Relationships
```typescript
// Facts with references to other facts
import { LabelOf, ModelBuilder, User } from 'jinaga';

export class GameSession {
  static Type = 'GameSession' as const;
  public type = GameSession.Type;
  
  constructor(
    public readonly game: Game,
    public readonly createdBy: User
  ) {}
}

export class PlayerMove {
  static Type = 'PlayerMove' as const;
  public type = PlayerMove.Type;
  
  constructor(
    public readonly session: GameSession,
    public readonly move: string,
    public readonly madeBy: User
  ) {}
}

// Model registration with relationships
export const gameModel = (b: ModelBuilder) =>
  b
    .type(GameSession, (m) => m.predecessor('game', Game).predecessor('createdBy', User))
    .type(PlayerMove, (m) => m.predecessor('session', GameSession).predecessor('madeBy', User));
```

### Multi-tenant Facts
```typescript
// Facts that belong to specific organizations
import { LabelOf, ModelBuilder, User } from 'jinaga';

export class Tenant {
  static Type = 'GameHub.Tenant' as const;
  public type = Tenant.Type;

  constructor(public creator: User) {}
}

export class Administrator {
  static Type = 'GameHub.Tenant.Administrator' as const;
  public type = Administrator.Type;

  constructor(
    public tenant: Tenant,
    public user: User,
    public createdAt: Date | string
  ) {}

  static of(tenant: LabelOf<Tenant>) {
    return tenant.successors(Administrator, (admin) => admin.tenant);
  }

  static by(user: LabelOf<User>) {
    return user.successors(Administrator, (admin) => admin.user);
  }

  static usersOf(tenant: LabelOf<Tenant>) {
    return tenant
      .successors(Administrator, (admin) => admin.tenant)
      .selectMany((admin) => admin.user.predecessor());
  }
}

// Model registration
export const tenantModel = (b: ModelBuilder) =>
  b
    .type(Tenant, (m) => m.predecessor('creator', User))
    .type(Administrator, (m) => m.predecessor('tenant', Tenant).predecessor('user', User));
```

## Authorization Rules (`app/gamehub-model/authorization/`)

### Basic Authorization
```typescript
// app/gamehub-model/authorization/tenantAuthorization.ts
import { AuthorizationRules } from 'jinaga';
import { Administrator, Tenant } from '../model/index.js';

export const tenantAuthorization = (a: AuthorizationRules) =>
  a
    // Only the creator can create a tenant
    .type(Tenant, (tenant) => tenant.creator.predecessor())

    // The creator of a tenant can create administrators for that tenant
    .type(Administrator, (admin) => admin.tenant.creator.predecessor())

    // Administrators can add other administrators to their tenant
    .type(Administrator, (admin) => Administrator.usersOf(admin.tenant));
```

### Role-based Authorization
```typescript
// Authorization based on user roles
import { AuthorizationRules } from 'jinaga';
import { Administrator, Tenant } from '../model/index.js';

export const adminAuthorization = (a: AuthorizationRules) =>
  a
    // Only administrators can access admin-only facts
    .type(AdminOnlyFact, (fact) => 
      Administrator.usersOf(fact.tenant)
    )

    // Administrators can manage their own tenant
    .type(TenantManagement, (management) => 
      Administrator.usersOf(management.tenant)
    );
```

### Hierarchical Authorization
```typescript
// Facts that inherit permissions from parent facts
import { AuthorizationRules } from 'jinaga';
import { Administrator, Tenant, Player } from '../model/index.js';

export const hierarchicalAuthorization = (a: AuthorizationRules) =>
  a
    // Players can access facts within their tenant
    .type(PlayerFact, (fact) => 
      Player.in(fact.tenant)
    )

    // Administrators can access all facts in their tenant
    .type(AnyTenantFact, (fact) => 
      Administrator.usersOf(fact.tenant)
    );
```

## Distribution Rules (`app/gamehub-model/distribution/`)

Distribution rules use the `share`/`with` pattern to control what queries users can execute. The `share` clause defines the query structure that users are allowed to run, and the `with` clause defines who can execute those queries.

### Distribution Rule Patterns (`share`/`with`)

#### Basic Share/With Pattern
```typescript
// CORRECT: Simple share/with pattern
.share(
  model.given(Tenant).match((tenant) => SomeFact.in(tenant))
)
.with(model.given(Tenant).match((tenant) => 
  Player.in(tenant).selectMany((player) => player.user.predecessor())
));

// This enables users to execute queries like:
const factsSpec = model.given(Tenant).match((tenant) => SomeFact.in(tenant));
const facts = await jinaga.query(factsSpec, tenant);
```

#### Common Mistakes to Avoid
```typescript
// ❌ WRONG: Complex joins in share clause
    .share(
  model.given(Tenant, User).match((tenant, user) =>
    SomeFact.in(tenant).join((fact) => fact.user, user)
  )
)
// This forces users to write complex queries with multiple parameters

// ❌ WRONG: Trying to filter in share clause
    .share(
  model.given(Tenant).match((tenant) => 
    SomeFact.in(tenant).where(fact => fact.isActive)
  )
)
// This makes the query structure more complex than necessary
```

#### Rule of Thumb
- `share` clause: Define WHAT queries users can execute (keep simple)
- `with` clause: Define WHO can execute those queries (can be complex)
- The share clause should match the structure of queries you want users to write
- Avoid complex joins in the `share` clause as they force complex user queries
- Use `selectMany` and `predecessor()` in the `with` clause for user traversal

### Why Simple Share Clauses Matter

Complex share clauses force users to write complex queries, which:
- Reduces usability for simple use cases
- Increases complexity for frontend developers
- Makes the API harder to understand and debug
- Can cause performance issues with unnecessary joins
- Creates barriers to adoption

The goal is to enable users to write intuitive, simple queries that match their mental model of the data.

### Distribution Rule Validation Checklist

Before implementing a distribution rule, verify:

1. **Share Clause Simplicity**
   - [ ] Share clause only defines the query structure users should write
   - [ ] No complex joins or filtering in share clause
   - [ ] Uses simple traversals like `Fact.in(tenant)`
   - [ ] Query structure is intuitive for users

2. **With Clause Completeness**
   - [ ] With clause defines who can execute the queries
   - [ ] Properly traverses to User objects (required for distribution)
   - [ ] Uses `selectMany` and `predecessor()` for user traversal

3. **Query Usability**
   - [ ] Users can write simple, intuitive queries
   - [ ] Query parameters are reasonable (not requiring complex joins)
   - [ ] Query structure matches the share clause
   - [ ] Query complexity matches the use case

4. **Pattern Consistency**
   - [ ] Follows existing patterns in the codebase
   - [ ] Matches the structure of other distribution rules
   - [ ] Uses the same traversal patterns as existing rules

5. **Testing**
   - [ ] Rule compiles without TypeScript errors
   - [ ] Rule follows the established `share`/`with` pattern
   - [ ] Users can successfully execute the intended queries

### Common Distribution Patterns

#### Enable Queries for All Players in Tenant
```typescript
.share(
  model.given(Tenant).match((tenant) => SomeFact.in(tenant))
)
.with(model.given(Tenant).match((tenant) => 
  Player.in(tenant).selectMany((player) => player.user.predecessor())
));

// Users can execute:
const factsSpec = model.given(Tenant).match((tenant) => SomeFact.in(tenant));
const facts = await jinaga.query(factsSpec, tenant);
```

#### Enable Queries for Administrators Only
```typescript
    .share(
  model.given(Tenant).match((tenant) => AdminFact.in(tenant))
    )
.with(model.given(Tenant).match((tenant) => 
  Administrator.usersOf(tenant)
));

// Administrators can execute:
const adminFactsSpec = model.given(Tenant).match((tenant) => AdminFact.in(tenant));
const adminFacts = await jinaga.query(adminFactsSpec, tenant);
```

#### Enable Queries for Specific User
```typescript
    .share(
  model.given(User).match((user) => UserSpecificFact.by(user))
    )
    .with(model.given(User).match((user) => user.predecessor()));

// Users can execute:
const userFactsSpec = model.given(User).match((user) => UserSpecificFact.by(user));
const userFacts = await jinaga.query(userFactsSpec, currentUser);
```

### Error Prevention Guidelines

#### Before Writing Distribution Rules
1. **Study Existing Rules**: Look at `tenantDistribution.ts` for patterns
2. **Keep Share Simple**: The share clause should enable simple, intuitive user queries
3. **Complexity in With**: Put complex logic in the `with` clause, not the `share` clause
4. **Test Query Usability**: Verify that users can write simple queries
5. **Follow the Pattern**: If your rule looks different from existing ones, reconsider

#### Common Error Patterns
- ❌ `model.given(Tenant, User)` for simple distributions (forces complex user queries)
- ❌ Complex joins in share clause (makes user queries complex)
- ❌ Missing `selectMany` and `predecessor()` in with clause
- ❌ Share clause doesn't match intended user query structure
- ❌ Requiring multiple parameters for simple queries

### Step-by-Step Distribution Rule Creation

1. **Identify the Query Structure**
   ```typescript
   // What query should users be able to execute?
   model.given(Tenant).match((tenant) => Playground.in(tenant))
   ```

2. **Identify the Recipients**
   ```typescript
   // Who should be able to execute these queries?
   Player.in(tenant).selectMany((player) => player.user.predecessor())
   ```

3. **Create the Share Clause**
   ```typescript
   .share(
     model.given(Tenant).match((tenant) => Playground.in(tenant))
   )
   ```

4. **Create the With Clause**
   ```typescript
   .with(model.given(Tenant).match((tenant) => 
     Player.in(tenant).selectMany((player) => player.user.predecessor())
   ))
   ```

5. **Verify the Pattern**
   - Share clause enables simple user queries
   - With clause properly traverses to User objects
   - Follows existing codebase patterns
   - Query structure is intuitive for users

### Advanced Distribution Patterns

For more complex distribution scenarios, refer to the existing patterns in `app/gamehub-model/distribution/tenantDistribution.ts`. The key principle remains: keep the `share` clause simple to enable simple user queries, and put complexity in the `with` clause.

## Best Practices

### Fact Design
1. **Immutable**: Facts should be immutable once created
2. **Referential**: Use references to other facts for relationships
3. **Hierarchical**: Structure facts in logical hierarchies

### Authorization Design
1. **Principle of Least Privilege**: Grant minimal necessary access
2. **Role-based**: Use roles for complex permission scenarios
3. **Inheritance**: Child facts inherit parent permissions
4. **Explicit**: Make authorization rules explicit and testable

### Query Design
1. **Simple**: Enable simple, intuitive user queries
2. **Consistent**: Use consistent patterns across similar facts
3. **Efficient**: Avoid unnecessary complexity in query structures
4. **Usable**: Design queries that match user mental models

### Performance Considerations
1. **Indexing**: Use appropriate fact types for efficient queries
2. **Distribution**: Minimize unnecessary query complexity
3. **Caching**: Cache frequently accessed facts on the client
4. **Pagination**: Handle large fact sets with pagination
