name: Player-IP CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'app/player-ip/**'
      - '.github/workflows/ci-cd.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'app/player-ip/**'
      - '.github/workflows/ci-cd.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: '20'
  SERVICE_NAME: 'player-ip'
  REGISTRY: 'ghcr.io'
  IMAGE_NAME: 'gamehub-player-ip'

jobs:
  # Code Quality and Security Checks
  quality-checks:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: app/player-ip
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: app/player-ip/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Type checking
        run: npm run type-check

      - name: Lint code
        run: npm run lint

      - name: Security audit
        run: npm audit --audit-level=moderate

      - name: Check for outdated dependencies
        run: npm outdated || true

  # Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: app/player-ip
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: app/player-ip/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Run unit tests
        run: npm run test:unit

      - name: Run component tests
        run: npm run test:component

      - name: Generate test coverage
        run: npm run test:coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: app/player-ip/coverage/lcov.info
          flags: unit-tests
          name: player-ip-unit-tests

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: app/player-ip
    
    services:
      # Add any external services needed for integration tests
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: app/player-ip/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Run integration tests
        run: npm run test:integration
        env:
          NODE_ENV: test
          JWT_SECRET: test-secret-key
          SKIP_JINAGA_SUBSCRIPTION: true

      - name: Run API contract tests
        run: npm run test:contract
        env:
          NODE_ENV: test
          JWT_SECRET: test-secret-key
          SKIP_JINAGA_SUBSCRIPTION: true

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: app/player-ip
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: app/player-ip/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Run performance tests
        run: npm run test:performance
        env:
          NODE_ENV: test
          JWT_SECRET: test-secret-key
          SKIP_JINAGA_SUBSCRIPTION: true

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-results
          path: app/player-ip/performance-results.json

  # Security Tests
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: app/player-ip
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: app/player-ip/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Run OWASP dependency check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'player-ip'
          path: 'app/player-ip'
          format: 'JSON'
          args: >
            --enableRetired
            --enableExperimental
            --failOnCVSS 7

      - name: Upload security scan results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-scan-results
          path: reports/

  # Build Docker Image
  build-image:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [quality-checks, unit-tests]
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: app/player-ip
          file: app/player-ip/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ steps.meta.outputs.tags }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v3
        with:
          name: sbom
          path: sbom.spdx.json

  # Container Security Scan
  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    needs: [build-image]
    
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build-image.outputs.image-tag }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [integration-tests, performance-tests, security-tests, build-image, container-security]
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment:
      name: staging
      url: https://staging-player-ip.gamehub.example.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          echo "Image: ${{ needs.build-image.outputs.image-tag }}"
          # Add actual deployment commands here
          # This could involve:
          # - Updating Kubernetes manifests
          # - Triggering ArgoCD sync
          # - Calling deployment API
          # - Running Terraform/Ansible

      - name: Run health checks
        run: |
          echo "Running post-deployment health checks..."
          # Add health check commands
          # node app/player-ip/scripts/health-check.js --url=https://staging-player-ip.gamehub.example.com

      - name: Run smoke tests
        run: |
          echo "Running smoke tests..."
          # Add smoke test commands

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [integration-tests, performance-tests, security-tests, build-image, container-security]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment:
      name: production
      url: https://player-ip.gamehub.example.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          echo "Image: ${{ needs.build-image.outputs.image-tag }}"
          # Add actual deployment commands here

      - name: Run database migrations
        run: |
          echo "Running database migrations..."
          # node app/player-ip/scripts/migrate.js

      - name: Run health checks
        run: |
          echo "Running post-deployment health checks..."
          # node app/player-ip/scripts/health-check.js --url=https://player-ip.gamehub.example.com

      - name: Run smoke tests
        run: |
          echo "Running production smoke tests..."
          # Add production smoke test commands

      - name: Notify deployment success
        if: success()
        run: |
          echo "Production deployment successful!"
          # Add notification logic (Slack, email, etc.)

  # Quality Gates
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [quality-checks, unit-tests, integration-tests, performance-tests, security-tests]
    if: always()
    
    steps:
      - name: Check quality gate
        run: |
          echo "Checking quality gate..."
          
          # Check if all required jobs passed
          if [[ "${{ needs.quality-checks.result }}" != "success" ]]; then
            echo "❌ Quality checks failed"
            exit 1
          fi
          
          if [[ "${{ needs.unit-tests.result }}" != "success" ]]; then
            echo "❌ Unit tests failed"
            exit 1
          fi
          
          if [[ "${{ needs.integration-tests.result }}" != "success" ]]; then
            echo "❌ Integration tests failed"
            exit 1
          fi
          
          if [[ "${{ needs.performance-tests.result }}" != "success" ]]; then
            echo "❌ Performance tests failed"
            exit 1
          fi
          
          if [[ "${{ needs.security-tests.result }}" != "success" ]]; then
            echo "❌ Security tests failed"
            exit 1
          fi
          
          echo "✅ All quality gates passed!"

      - name: Generate quality report
        if: always()
        run: |
          echo "# Quality Gate Report" > quality-report.md
          echo "" >> quality-report.md
          echo "## Test Results" >> quality-report.md
          echo "- Quality Checks: ${{ needs.quality-checks.result }}" >> quality-report.md
          echo "- Unit Tests: ${{ needs.unit-tests.result }}" >> quality-report.md
          echo "- Integration Tests: ${{ needs.integration-tests.result }}" >> quality-report.md
          echo "- Performance Tests: ${{ needs.performance-tests.result }}" >> quality-report.md
          echo "- Security Tests: ${{ needs.security-tests.result }}" >> quality-report.md

      - name: Upload quality report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: quality-report
          path: quality-report.md

  # Cleanup
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production, quality-gate]
    if: always()
    
    steps:
      - name: Clean up temporary resources
        run: |
          echo "Cleaning up temporary resources..."
          # Add cleanup commands if needed

      - name: Archive test results
        if: always()
        run: |
          echo "Archiving test results..."
          # Add archival logic if needed